
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON EQUALS ID LBRACE NO NUMBER RBRACE STRING YESnaval_file : statementsstatements : statement\n| statements statement\n| emptystatement : ID EQUALS value\n| ID EQUALS blockvalue : ID\n| NUMBER\n| STRING\n| YES\n| NO\n| qualified_idqualified_id : ID COLON IDblock : LBRACE statements RBRACE\n| LBRACE RBRACEempty :'
    
_lr_action_items = {'ID':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[5,5,-2,-4,-3,8,-7,-5,-6,-8,-9,-10,-11,-12,5,20,5,-15,-13,-14,]),'$end':([0,1,2,3,4,6,8,9,10,11,12,13,14,15,19,20,21,],[-16,0,-1,-2,-4,-3,-7,-5,-6,-8,-9,-10,-11,-12,-15,-13,-14,]),'RBRACE':([3,4,6,8,9,10,11,12,13,14,15,16,18,19,20,21,],[-2,-4,-3,-7,-5,-6,-8,-9,-10,-11,-12,19,21,-15,-13,-14,]),'EQUALS':([5,],[7,]),'NUMBER':([7,],[11,]),'STRING':([7,],[12,]),'YES':([7,],[13,]),'NO':([7,],[14,]),'LBRACE':([7,],[16,]),'COLON':([8,],[17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'naval_file':([0,],[1,]),'statements':([0,16,],[2,18,]),'statement':([0,2,16,18,],[3,6,3,6,]),'empty':([0,16,],[4,4,]),'value':([7,],[9,]),'block':([7,],[10,]),'qualified_id':([7,],[15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> naval_file","S'",1,None,None,None),
  ('naval_file -> statements','naval_file',1,'p_naval_file','NavalOOBParser.py',85),
  ('statements -> statement','statements',1,'p_statements','NavalOOBParser.py',90),
  ('statements -> statements statement','statements',2,'p_statements','NavalOOBParser.py',91),
  ('statements -> empty','statements',1,'p_statements','NavalOOBParser.py',92),
  ('statement -> ID EQUALS value','statement',3,'p_statement','NavalOOBParser.py',119),
  ('statement -> ID EQUALS block','statement',3,'p_statement','NavalOOBParser.py',120),
  ('value -> ID','value',1,'p_value','NavalOOBParser.py',125),
  ('value -> NUMBER','value',1,'p_value','NavalOOBParser.py',126),
  ('value -> STRING','value',1,'p_value','NavalOOBParser.py',127),
  ('value -> YES','value',1,'p_value','NavalOOBParser.py',128),
  ('value -> NO','value',1,'p_value','NavalOOBParser.py',129),
  ('value -> qualified_id','value',1,'p_value','NavalOOBParser.py',130),
  ('qualified_id -> ID COLON ID','qualified_id',3,'p_qualified_id','NavalOOBParser.py',135),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','NavalOOBParser.py',141),
  ('block -> LBRACE RBRACE','block',2,'p_block','NavalOOBParser.py',142),
  ('empty -> <empty>','empty',0,'p_empty','NavalOOBParser.py',150),
]
